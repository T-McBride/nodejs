<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Simple Webhook Demo</title>
    <link href="/css/my.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  </head>
  <body>
    <div id="nav"></div>
    <div id="wrap">
      <div class="container-fluid">
        <div class="row">
          <div class="col-6">
            <div class="card" style="width: 80%;">
              <div class="card-body">
                <h5 class="card-title">Disclaimer</h5>
                <h6 class="card-subtitle mb-2 text-muted">Example Only!</h6>
                <p class="card-text">No code here should be used directly in a production environment. This is an demonstration of concept only for visualization / discussion.</p>
                <a href="#" class="card-link">Card link</a>
                <a href="#" class="card-link">Another link</a>
              </div>
            </div>
          </div>
          <div class="col-6">
            <div class="card" style="width: 80%;">
              <div class="card-body">
                <h5 class="card-title">Attribution</h5>
                <img style="float:right" src="images/X25.jpg" width=80 />
                <p class="card-text">This page demonstrates a concept discussed at the ICE X25 conference. It was presented as a high level concept by  <a href="https://www.linkedin.com/in/vishweshvpatil/"> Vishwesh Patil</a>.
              </div>
            </div>
          </div>
        </div>
      </div>
      <hr>
      <div class="row">
        <div class="col-12">
          <h1>Workflow</div>
          <img style="margin:auto" src="images/flowchart.svg"/>
        </div>
      </div>
      <div class="row">
        <div class="col-6">
          6
        </div>
        <div class="col-6">
          6
        </div>
      </div>
    </div>
      <!-- <header>
      <h1 class="content" text-align="center">Webhook POC app</h1>
    </header>
    <div class="content">
     <div id="attribution">
        <img style="float:right;padding:10px" src="./images/X25.jpg" width=100/>
        This is a simple of example of the concept presented by <a href="https://www.linkedin.com/in/vishweshvpatil/"> Vishwesh Patil</a> at the X25 ROI session. 
      </div>
      <div id="info">
        <h2>Setup / Overview</h2>
        <ul>
          <li>Standard html app served on port 3000</li>
          <ul>
            <li>This app receives 'subscribed' webhooks at endpoint <b>/webhooks</b> 
            <li>Extra fields may be passed and used in validation at this layer</li>
          </ul>
          <li>Validated webhooks can then be split, parsed, and publised to multiple places {ICE endpoints, vendors, internal apps, etc}</li>
        </ul>
      <img src="./images/flowchart.svg"/>
      <h2>This Example</h2>
      This example accepts webhooks (POST requests) to ./webhooks/... 
      <ul> 
        <li>fdata : this endpoint will create a POST request to the websocket server containing fake loan data</li>
        <ul> 
          <li><i>curl --header "Content-Type: application/json" --request POST -d '{"message":"Any message longer than 8 chars"}' http://localhost:3000/webhook/fdata</i></li>
          <li>This request will be validated and generate fake loan data</li>
          <li><i>curl --header "Content-Type: application/json" --request POST -d '{"message":"short"}' http://localhost:3000/webhook/fdata</i></li>
          <li>This request will fail validation for being too short and workflow will not continue</li>
        </ul>
        <li>fevent : this endpoint will create a POST request to the websocket server containing fake loan event data</li>
         <ul> 
          <li>curl --header "Content-Type: application/json" --request POST -d '{"message":"Any message longer than 8 chars"}' http://localhost:3000/webhook/fevent</i></li>
          <li>This request will be validated and generate fake loan events</li>
        </ul>
      </ul>
      Both endpoints require a JSON data string containing message and message must be greater than 8 charecters. In a real production example these POST requests would bot to ICE endpoints and use the data previously passed / validated by the webhooks. 
      </div>
      <hr>
      <h2>Live Event Notifications</h2>
      <div id="notifications"></div>
    </div>
    <footer>
      just a footer
    </footer> -->
    <!--<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script>
      // Connect to the WebSocket server
      const ws = new WebSocket('ws://localhost:8088');
      // Display notifications received from the WebSocket
      ws.onmessage = event => {
        const notificationsDiv = document.getElementById('notifications');
        const message = document.createElement('div');
        message.textContent = `${event.data}`;
        notificationsDiv.appendChild(message);
      };
      ws.onopen = () => console.log('WebSocket connection opened');
      ws.onclose = () => console.log('WebSocket connection closed');
    </script>
    <script>
      $(document).ready(function() {
        $('#nav').load('nav');
      });
    </script>
  </body>
</html>
